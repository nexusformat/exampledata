 
import numpy as np
import datetime
import h5py
import os
 
# Note this example script was generated by nxdl_to_hdf5.py using the current 
# installed version of the NEXUS definitions ver[v2020.10] 
 
root = h5py.File('NXpeem.h5', 'w')

# Create the GROUPS 
 
root.create_group('entry')
root['/entry'].attrs['NX_class'] = 'NXentry'
root['/entry'].attrs['EX_required'] = 'true'
 
root['/entry/'].create_group('instrument')
root['/entry/instrument'].attrs['NX_class'] = 'NXinstrument'
root['/entry/instrument'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/'].create_group('source')
root['/entry/instrument/source'].attrs['NX_class'] = 'NXsource'
root['/entry/instrument/source'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/'].create_group('monochromator')
root['/entry/instrument/monochromator'].attrs['NX_class'] = 'NXmonochromator'
root['/entry/instrument/monochromator'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/'].create_group('detector')
root['/entry/instrument/detector'].attrs['NX_class'] = 'NXdetector'
root['/entry/instrument/detector'].attrs['EX_required'] = 'true'
 
root['/entry/'].create_group('sample')
root['/entry/sample'].attrs['NX_class'] = 'NXsample'
root['/entry/sample'].attrs['EX_required'] = 'true'
 
root['/entry/'].create_group('data')
root['/entry/data'].attrs['NX_class'] = 'NXdata'
root['/entry/data'].attrs['EX_required'] = 'true'

# Create the FIELDS 
 
root['/entry'].create_dataset(name='title', data='SAMPLE-CHAR-DATA', maxshape=None)
root['/entry/title'].attrs['type'] = 'NX_CHAR'
root['/entry/title'].attrs['EX_required'] = 'true'
 
root['/entry'].create_dataset(name='start_time', data='2022-03-03T14:34:14.801656', maxshape=None)
root['/entry/start_time'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/start_time'].attrs['EX_required'] = 'true'
 
root['/entry'].create_dataset(name='end_time', data='2022-03-03T14:34:14.801656', maxshape=None)
root['/entry/end_time'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/end_time'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry']['definition'] are: 
#	 NXpeem
 
root['/entry'].create_dataset(name='definition', data='NXpeem', maxshape=None)
root['/entry/definition'].attrs['type'] = 'NX_CHAR'
root['/entry/definition'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source'].create_dataset(name='type', data='SAMPLE-CHAR-DATA', maxshape=None)
root['/entry/instrument/source/type'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/type'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source'].create_dataset(name='name', data='SAMPLE-CHAR-DATA', maxshape=None)
root['/entry/instrument/source/name'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/name'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source'].create_dataset(name='probe', data='SAMPLE-CHAR-DATA', maxshape=None)
root['/entry/instrument/source/probe'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/probe'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/monochromator'].create_dataset(name='energy', data=1.0, maxshape=None)
root['/entry/instrument/monochromator/energy'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/monochromator/energy'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/detector'].create_dataset(name='data', data=1.0, maxshape=None)
root['/entry/instrument/detector/data'].attrs['type'] = 'NX_NUMBER'
root['/entry/instrument/detector/data'].attrs['EX_required'] = 'true'
 
root['/entry/sample'].create_dataset(name='rotation_angle', data=1.0, maxshape=None)
root['/entry/sample/rotation_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/rotation_angle'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry/data']['peem_scan_type'] are: 
#	 single image scan
#	 stack scan
#	 focus scan
#	 single variable scan
#	 two variable scan
#	 time scan
 
root['/entry/data'].create_dataset(name='peem_scan_type', data='single image scan', maxshape=None)
root['/entry/data/peem_scan_type'].attrs['type'] = 'NX_CHAR'
root['/entry/data/peem_scan_type'].attrs['EX_required'] = 'true'
 
root['/entry/data'].create_dataset(name='img_data', data=1.0, maxshape=None)
root['/entry/data/img_data'].attrs['type'] = 'NX_NUMBER'
root['/entry/data/img_data'].attrs['EX_required'] = 'true'
 
root['/entry/data'].create_dataset(name='spec_data', data=1.0, maxshape=None)
root['/entry/data/spec_data'].attrs['type'] = 'NX_NUMBER'
root['/entry/data/spec_data'].attrs['EX_required'] = 'true'
root['/entry/data/spec_data'].attrs['signal'] = '1'
 
root['/entry/data'].create_dataset(name='energy', data=1.0, maxshape=None)
root['/entry/data/energy'].attrs['type'] = 'NX_FLOAT'
root['/entry/data/energy'].attrs['EX_required'] = 'true'
 
root['/entry/data'].create_dataset(name='polarization', data=1.0, maxshape=None)
root['/entry/data/polarization'].attrs['type'] = 'NX_FLOAT'
root['/entry/data/polarization'].attrs['EX_required'] = 'false'
 
root['/entry/data'].create_dataset(name='averages', data=1, maxshape=None)
root['/entry/data/averages'].attrs['type'] = 'NX_INTEGER'
root['/entry/data/averages'].attrs['EX_required'] = 'true'
 
root['/entry/data'].create_dataset(name='count_time', data=1.0, maxshape=None)
root['/entry/data/count_time'].attrs['type'] = 'NX_FLOAT'
root['/entry/data/count_time'].attrs['EX_required'] = 'true'

# Create the DOC strings 
root['/entry/definition'].attrs['EX_doc'] = 'Official NeXus NXDL schema to which this file conforms '
root['/entry/instrument/detector/data'].attrs['EX_doc'] = 'Detector data should be presented with the first dimension corresponding to the scan point and subsequent dimensions corresponding to the output of the detector. Detectors that provide more than one value per scan point should have a data array of rank 1+d, where d is the dimensions of the array provided per scan point. For example, an area detector should have an NXdetector data array of 3 dimensions, with the first being the set of scan points and the latter two being the x- and y- extent of the detector '
root['/entry/data'].attrs['EX_doc'] = 'This will contain all the data for a particular ROI '
root['/entry/data/peem_scan_type'].attrs['EX_doc'] = 'Label for typical scan types as a convenience for humans. Each label corresponds to a specific set of axes being scanned to produce a data array of shape: * single image scan: (photon_energy, 2D image data) * stack scan: (photon_energy, polarization, 2D image data + 1D spectra) * focus scan: (photon_energy, 2D image data) * single variable scan: (variable, 2D image data + 1D spectra) * two variable scan: (variable1, variable2, 2D image data + 1D spectra) * time scan: (time, 2D image data + 1D spectra) The "single image scan" string is to be used when none of the other choices are appropriate. '
root['/entry/data/img_data'].attrs['EX_doc'] = 'This will contain a multi dimensonal array that with the columns determined by the scan type '
root['/entry/data/spec_data'].attrs['EX_doc'] = 'This will contain a multi dimensonal array that with the columns determined by the scan type '
root['/entry/data/energy'].attrs['EX_doc'] = 'List of photon energies of the X-ray beam. If scanned through multiple values, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
root['/entry/data/polarization'].attrs['EX_doc'] = 'List of polarizations. If scanned through multiple values, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
root['/entry/data/averages'].attrs['EX_doc'] = 'List of Y positions on the sample. If scanned through multiple values, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
root['/entry/data/count_time'].attrs['EX_doc'] = 'List of dwell times for each point in the scan, they may vary point to point, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
 

# Create the ATTRIBUTES 
root['/'].attrs['default'] = 'entry'
root['/entry'].attrs['default'] = 'data'
root['/entry/data'].attrs['signal'] = 'averages'
root['/entry/data/averages'].attrs['signal'] = '1'
root.attrs['file_name'] = os.path.abspath('NXpeem')
root.attrs['file_time'] = datetime.datetime.now().isoformat()
root.attrs['h5py_version'] = h5py.version.version
root.attrs['HDF5_Version'] = h5py.version.hdf5_version

# Close the file
root.close()


