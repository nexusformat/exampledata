 
import numpy as np
import datetime
import h5py
import os
 
# Note this example script was generated by nxdl_to_hdf5.py using the current 
# installed version of the NEXUS definitions ver[v2020.10] 
 
root = h5py.File('h5py_NXdirecttof.h5', 'w')
 
root.create_group('entry')
root['/entry'].attrs['NX_class'] = 'NXentry'
root['/entry'].attrs['EX_required'] = 'true'
 
root['/entry/'].create_group('untitled_instrument')
root['/entry/untitled_instrument'].attrs['NX_class'] = 'NXinstrument'
root['/entry/untitled_instrument'].attrs['EX_required'] = 'true'
 
root['/entry/untitled_instrument/'].create_group('fermi_chopper')
root['/entry/untitled_instrument/fermi_chopper'].attrs['NX_class'] = 'NXfermi_chopper'
root['/entry/untitled_instrument/fermi_chopper'].attrs['EX_required'] = 'false'
 
root['/entry/untitled_instrument/'].create_group('disk_chopper')
root['/entry/untitled_instrument/disk_chopper'].attrs['NX_class'] = 'NXdisk_chopper'
root['/entry/untitled_instrument/disk_chopper'].attrs['EX_required'] = 'false'
 
root['/entry'].create_dataset(name='title', data=1.0, maxshape=None)
root['/entry/title'].attrs['type'] = 'NX_NUMBER'
root['/entry/title'].attrs['EX_required'] = 'true'
 
root['/entry'].create_dataset(name='start_time', data='2021-03-22T16:42:15.537329', maxshape=None)
root['/entry/start_time'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/start_time'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry']['definition'] are: 
#	 NXdirecttof
 
root['/entry'].create_dataset(name='definition', data='NXdirecttof', maxshape=None)
root['/entry/definition'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/definition'].attrs['EX_required'] = 'true'
 
root['/entry/untitled_instrument/fermi_chopper'].create_dataset(name='rotation_speed', data=1.0, maxshape=None)
root['/entry/untitled_instrument/fermi_chopper/rotation_speed'].attrs['type'] = 'NX_FLOAT'
root['/entry/untitled_instrument/fermi_chopper/rotation_speed'].attrs['EX_required'] = 'true'
root['/entry/untitled_instrument/fermi_chopper/rotation_speed'].attrs['units'] = 'NX_FREQUENCY'
 
root['/entry/untitled_instrument/fermi_chopper'].create_dataset(name='energy', data=1.0, maxshape=None)
root['/entry/untitled_instrument/fermi_chopper/energy'].attrs['type'] = 'NX_FLOAT'
root['/entry/untitled_instrument/fermi_chopper/energy'].attrs['EX_required'] = 'true'
root['/entry/untitled_instrument/fermi_chopper/energy'].attrs['units'] = 'NX_ENERGY'
 
root['/entry/untitled_instrument/disk_chopper'].create_dataset(name='rotation_speed', data=1.0, maxshape=None)
root['/entry/untitled_instrument/disk_chopper/rotation_speed'].attrs['type'] = 'NX_FLOAT'
root['/entry/untitled_instrument/disk_chopper/rotation_speed'].attrs['EX_required'] = 'true'
root['/entry/untitled_instrument/disk_chopper/rotation_speed'].attrs['units'] = 'NX_FREQUENCY'
 
root['/entry/untitled_instrument/disk_chopper'].create_dataset(name='energy', data=1.0, maxshape=None)
root['/entry/untitled_instrument/disk_chopper/energy'].attrs['type'] = 'NX_FLOAT'
root['/entry/untitled_instrument/disk_chopper/energy'].attrs['EX_required'] = 'true'
root['/entry/untitled_instrument/disk_chopper/energy'].attrs['units'] = 'NX_ENERGY'
root['/entry/definition'].attrs['EX_doc'] = '     Official NeXus NXDL schema to which this file conforms    '
root['/entry/untitled_instrument/fermi_chopper/rotation_speed'].attrs['EX_doc'] = '       chopper rotation speed      '
root['/entry/untitled_instrument/fermi_chopper/energy'].attrs['EX_doc'] = '       energy selected      '
root['/entry/untitled_instrument/disk_chopper/rotation_speed'].attrs['EX_doc'] = '       chopper rotation speed      '
root['/entry/untitled_instrument/disk_chopper/energy'].attrs['EX_doc'] = '       energy selected      '
root['/entry/untitled_instrument'].attrs['EX_doc'] = '     We definitly want the rotation_speed and energy of the chopper. Thus either            a fermi_chopper or a disk_chopper group is required.    '
root['/'].attrs['default'] = 'entry'
root.attrs['file_name'] = os.path.abspath('NXdirecttof')
root.attrs['file_time'] = datetime.datetime.now().isoformat()
root.attrs['h5py_version'] = h5py.version.version
root.attrs['HDF5_Version'] = h5py.version.hdf5_version
root.close()


