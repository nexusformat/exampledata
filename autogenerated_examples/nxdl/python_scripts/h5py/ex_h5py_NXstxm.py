 
import numpy as np
import datetime
import h5py
import os
 
# Note this example script was generated by nxdl_to_hdf5.py using the current 
# installed version of the NEXUS definitions ver[v2020.10] 
 
root = h5py.File('h5py_NXstxm.h5', 'w')
 
root.create_group('untitled_entry')
root['/untitled_entry'].attrs['NX_class'] = 'NXentry'
root['/untitled_entry'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/'].create_group('untitled_instrument')
root['/untitled_entry/untitled_instrument'].attrs['NX_class'] = 'NXinstrument'
root['/untitled_entry/untitled_instrument'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/'].create_group('untitled_source')
root['/untitled_entry/untitled_instrument/untitled_source'].attrs['NX_class'] = 'NXsource'
root['/untitled_entry/untitled_instrument/untitled_source'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/'].create_group('monochromator')
root['/untitled_entry/untitled_instrument/monochromator'].attrs['NX_class'] = 'NXmonochromator'
root['/untitled_entry/untitled_instrument/monochromator'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/'].create_group('untitled_detector')
root['/untitled_entry/untitled_instrument/untitled_detector'].attrs['NX_class'] = 'NXdetector'
root['/untitled_entry/untitled_instrument/untitled_detector'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/'].create_group('sample_x')
root['/untitled_entry/untitled_instrument/sample_x'].attrs['NX_class'] = 'NXdetector'
root['/untitled_entry/untitled_instrument/sample_x'].attrs['EX_required'] = 'false'
 
root['/untitled_entry/untitled_instrument/'].create_group('sample_y')
root['/untitled_entry/untitled_instrument/sample_y'].attrs['NX_class'] = 'NXdetector'
root['/untitled_entry/untitled_instrument/sample_y'].attrs['EX_required'] = 'false'
 
root['/untitled_entry/untitled_instrument/'].create_group('sample_z')
root['/untitled_entry/untitled_instrument/sample_z'].attrs['NX_class'] = 'NXdetector'
root['/untitled_entry/untitled_instrument/sample_z'].attrs['EX_required'] = 'false'
 
root['/untitled_entry/'].create_group('untitled_sample')
root['/untitled_entry/untitled_sample'].attrs['NX_class'] = 'NXsample'
root['/untitled_entry/untitled_sample'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/'].create_group('untitled_data')
root['/untitled_entry/untitled_data'].attrs['NX_class'] = 'NXdata'
root['/untitled_entry/untitled_data'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/'].create_group('control')
root['/untitled_entry/control'].attrs['NX_class'] = 'NXmonitor'
root['/untitled_entry/control'].attrs['EX_required'] = 'false'
 
root['/untitled_entry'].create_dataset(name='title', data='!some char data!', maxshape=None)
root['/untitled_entry/title'].attrs['type'] = 'NX_CHAR'
root['/untitled_entry/title'].attrs['units'] = ''
root['/untitled_entry/title'].attrs['EX_required'] = 'true'
 
root['/untitled_entry'].create_dataset(name='start_time', data='2021-03-22T14:00:28.221954', maxshape=None)
root['/untitled_entry/start_time'].attrs['type'] = 'NX_DATE_TIME'
root['/untitled_entry/start_time'].attrs['units'] = ''
root['/untitled_entry/start_time'].attrs['EX_required'] = 'true'
 
root['/untitled_entry'].create_dataset(name='end_time', data='2021-03-22T14:00:28.224249', maxshape=None)
root['/untitled_entry/end_time'].attrs['type'] = 'NX_DATE_TIME'
root['/untitled_entry/end_time'].attrs['units'] = ''
root['/untitled_entry/end_time'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/untitled_entry']['definition'] are: 
#	 NXstxm
 
root['/untitled_entry'].create_dataset(name='definition', data='NXstxm', maxshape=None)
root['/untitled_entry/definition'].attrs['type'] = 'NX_CHAR'
root['/untitled_entry/definition'].attrs['units'] = ''
root['/untitled_entry/definition'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/untitled_source'].create_dataset(name='type', data='!some char data!', maxshape=None)
root['/untitled_entry/untitled_instrument/untitled_source/type'].attrs['type'] = 'NX_CHAR'
root['/untitled_entry/untitled_instrument/untitled_source/type'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/untitled_source/type'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/untitled_source'].create_dataset(name='name', data='!some char data!', maxshape=None)
root['/untitled_entry/untitled_instrument/untitled_source/name'].attrs['type'] = 'NX_CHAR'
root['/untitled_entry/untitled_instrument/untitled_source/name'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/untitled_source/name'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/untitled_source'].create_dataset(name='probe', data='!some char data!', maxshape=None)
root['/untitled_entry/untitled_instrument/untitled_source/probe'].attrs['type'] = 'NX_CHAR'
root['/untitled_entry/untitled_instrument/untitled_source/probe'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/untitled_source/probe'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/monochromator'].create_dataset(name='energy', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_instrument/monochromator/energy'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_instrument/monochromator/energy'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/monochromator/energy'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/untitled_detector'].create_dataset(name='data', data=1.0, maxshape=None)
root['/untitled_entry/untitled_instrument/untitled_detector/data'].attrs['type'] = 'NX_NUMBER'
root['/untitled_entry/untitled_instrument/untitled_detector/data'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/untitled_detector/data'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/sample_x'].create_dataset(name='data', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_instrument/sample_x/data'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_instrument/sample_x/data'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/sample_x/data'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/sample_y'].create_dataset(name='data', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_instrument/sample_y/data'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_instrument/sample_y/data'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/sample_y/data'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_instrument/sample_z'].create_dataset(name='data', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_instrument/sample_z/data'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_instrument/sample_z/data'].attrs['units'] = ''
root['/untitled_entry/untitled_instrument/sample_z/data'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_sample'].create_dataset(name='rotation_angle', data=1.0, maxshape=None)
root['/untitled_entry/untitled_sample/rotation_angle'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_sample/rotation_angle'].attrs['units'] = ''
root['/untitled_entry/untitled_sample/rotation_angle'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/untitled_entry/untitled_data']['stxm_scan_type'] are: 
#	 sample point spectrum
#	 sample line spectrum
#	 sample image
#	 sample image stack
#	 sample focus
#	 osa image
#	 osa focus
#	 detector image
#	 generic scan
 
root['/untitled_entry/untitled_data'].create_dataset(name='stxm_scan_type', data='sample point spectrum', maxshape=None)
root['/untitled_entry/untitled_data/stxm_scan_type'].attrs['type'] = 'NX_CHAR'
root['/untitled_entry/untitled_data/stxm_scan_type'].attrs['units'] = ''
root['/untitled_entry/untitled_data/stxm_scan_type'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_data'].create_dataset(name='data', data=1.0, maxshape=None)
root['/untitled_entry/untitled_data/data'].attrs['type'] = 'NX_NUMBER'
root['/untitled_entry/untitled_data/data'].attrs['units'] = ''
root['/untitled_entry/untitled_data/data'].attrs['EX_required'] = 'true'
root['/untitled_entry/untitled_data/data'].attrs['signal'] = '1'
 
root['/untitled_entry/untitled_data'].create_dataset(name='energy', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_data/energy'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_data/energy'].attrs['units'] = ''
root['/untitled_entry/untitled_data/energy'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_data'].create_dataset(name='sample_y', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_data/sample_y'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_data/sample_y'].attrs['units'] = ''
root['/untitled_entry/untitled_data/sample_y'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/untitled_data'].create_dataset(name='sample_x', data=[1.], maxshape=None, compression="gzip")
root['/untitled_entry/untitled_data/sample_x'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/untitled_data/sample_x'].attrs['units'] = ''
root['/untitled_entry/untitled_data/sample_x'].attrs['EX_required'] = 'true'
 
root['/untitled_entry/control'].create_dataset(name='data', data=1.0, maxshape=None)
root['/untitled_entry/control/data'].attrs['type'] = 'NX_FLOAT'
root['/untitled_entry/control/data'].attrs['units'] = ''
root['/untitled_entry/control/data'].attrs['EX_required'] = 'true'
root['/untitled_entry/definition'].attrs['EX_doc'] = '     Official NeXus NXDL schema to which this file conforms    '
root['/untitled_entry/untitled_instrument/untitled_detector/data'].attrs['EX_doc'] = '        Detector data should be presented with the first dimension corresponding to the                     scan point and subsequent dimensions corresponding to the output of the detector.                     Detectors that provide more than one value per scan point should have                     a data array of rank 1+d, where d is the dimensions of the array provided per                     scan point. For example, an area detector should have an NXdetector data array                     of 3 dimensions, with the first being the set of scan points and the latter                      two being the x- and y- extent of the detector.                         NOTE: For each dimension > 1 there must exist a dim section such as:        '
root['/untitled_entry/untitled_instrument/sample_x'].attrs['EX_doc'] = '      Measurements of the sample position from the x-axis interferometer.     '
root['/untitled_entry/untitled_instrument/sample_y'].attrs['EX_doc'] = '      Measurements of the sample position from the y-axis interferometer.     '
root['/untitled_entry/untitled_instrument/sample_z'].attrs['EX_doc'] = '      Measurements of the sample position from the z-axis interferometer.     '
root['/untitled_entry/untitled_data/stxm_scan_type'].attrs['EX_doc'] = '      Label for typical scan types as a convenience for humans.                  Each label corresponds to a specific set of axes being scanned                  to produce a data array of shape:                                  * sample point spectrum: (photon_energy,)                 * sample line spectrum: (photon_energy, sample_y/sample_x)                 * sample image: (sample_y, sample_x)                 * sample image stack: (photon_energy, sample_y, sample_x)                 * sample focus: (zoneplate_z, sample_y/sample_x)                 * osa image: (osa_y, osa_x)                 * osa focus: (zoneplate_z, osa_y/osa_x)                 * detector image: (detector_y, detector_x)                                  The "generic scan" string is to be used when none of the                  other choices are appropriate.     '
root['/untitled_entry/untitled_data/data'].attrs['EX_doc'] = '      Detectors that provide more than one value per scan point should be summarised               to a single value per scan point for this array in order to simplify plotting.                              Note that "Line scans" and focus type scans measure along one spatial dimension               but are not restricted to being parallel to the X or Y axes. Such scans                should therefore use a single dimension for the positions along the spatial               line. The "sample_x" and "sample_y" fields should then contain lists of the               x- and y-positions and should both have the "axis" attribute pointing to the same dimension.     '
root['/untitled_entry/untitled_data/energy'].attrs['EX_doc'] = '      List of photon energies of the X-ray beam. If scanned through multiple values,               then an "axis" attribute will be required to link the field to the appropriate data array dimension.     '
root['/untitled_entry/untitled_data/sample_y'].attrs['EX_doc'] = '      List of Y positions on the sample. If scanned through multiple values,               then an "axis" attribute will be required to link the field to the appropriate data array dimension.     '
root['/untitled_entry/untitled_data/sample_x'].attrs['EX_doc'] = '      List of X positions on the sample. If scanned through multiple values,               then an "axis" attribute will be required to link the field to the appropriate data array dimension.     '
root['/untitled_entry/control/data'].attrs['EX_doc'] = '      Values to use to normalise for time-variations in photon flux. Typically, the synchrotron storage ring               electron beam current is used as a proxy for the X-ray beam intensity. Array must have same shape as the               NXdata groups.     '
root['/'].attrs['default'] = 'untitled_entry'
root['/untitled_entry'].attrs['default'] = 'untitled_data'
root['/untitled_entry/untitled_data'].attrs['signal'] = 'data'
root['/untitled_entry/untitled_data/data'].attrs['signal'] = '1'
root.attrs['file_name'] = os.path.abspath('NXstxm')
root.attrs['file_time'] = datetime.datetime.now().isoformat()
root.attrs['h5py_version'] = h5py.version.version
root.attrs['HDF5_Version'] = h5py.version.hdf5_version
root.close()


