 
import numpy as np
from nexusformat.nexus import *
 
# Note this example script was generated by nxdl_to_hdf5.py using the current 
# installed version of the NEXUS definitions ver[v2020.10] 
 
root = NXroot()

# Create the GROUPS 
root['/entry'] = NXentry()
root['/entry'].attrs['EX_required'] = 'true'
root['/entry/instrument'] = NXinstrument()
root['/entry/instrument'].attrs['EX_required'] = 'true'
root['/entry/instrument/source'] = NXsource()
root['/entry/instrument/source'].attrs['EX_required'] = 'true'
root['/entry/instrument/monochromator'] = NXmonochromator()
root['/entry/instrument/monochromator'].attrs['EX_required'] = 'true'
root['/entry/instrument/detector'] = NXdetector()
root['/entry/instrument/detector'].attrs['EX_required'] = 'true'
root['/entry/instrument/sample_x'] = NXdetector()
root['/entry/instrument/sample_x'].attrs['EX_required'] = 'false'
root['/entry/instrument/sample_y'] = NXdetector()
root['/entry/instrument/sample_y'].attrs['EX_required'] = 'false'
root['/entry/instrument/sample_z'] = NXdetector()
root['/entry/instrument/sample_z'].attrs['EX_required'] = 'false'
root['/entry/sample'] = NXsample()
root['/entry/sample'].attrs['EX_required'] = 'true'
root['/entry/data'] = NXdata()
root['/entry/data'].attrs['EX_required'] = 'true'
root['/entry/control'] = NXmonitor()
root['/entry/control'].attrs['EX_required'] = 'false'

# Create the FIELDS 
 
root['/entry/title'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/title'].attrs['type'] = 'NX_CHAR'
root['/entry/title'].attrs['EX_required'] = 'true'
 
root['/entry/start_time'] = NXfield('2021-03-29T15:07:32.419258')
root['/entry/start_time'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/start_time'].attrs['EX_required'] = 'true'
 
root['/entry/end_time'] = NXfield('2021-03-29T15:07:32.426260')
root['/entry/end_time'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/end_time'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry']['definition'] are: 
#	 NXstxm
 
root['/entry/definition'] = NXfield('NXstxm')
root['/entry/definition'].attrs['type'] = 'NX_CHAR'
root['/entry/definition'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source/type'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/instrument/source/type'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/type'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source/name'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/instrument/source/name'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/name'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source/probe'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/instrument/source/probe'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/probe'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/monochromator/energy'] = NXfield(1.0)
root['/entry/instrument/monochromator/energy'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/monochromator/energy'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/detector/data'] = NXfield(1.0)
root['/entry/instrument/detector/data'].attrs['type'] = 'NX_NUMBER'
root['/entry/instrument/detector/data'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/sample_x/data'] = NXfield(1.0)
root['/entry/instrument/sample_x/data'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/sample_x/data'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/sample_y/data'] = NXfield(1.0)
root['/entry/instrument/sample_y/data'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/sample_y/data'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/sample_z/data'] = NXfield(1.0)
root['/entry/instrument/sample_z/data'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/sample_z/data'].attrs['EX_required'] = 'true'
 
root['/entry/sample/rotation_angle'] = NXfield(1.0)
root['/entry/sample/rotation_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/rotation_angle'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry/data']['stxm_scan_type'] are: 
#	 sample point spectrum
#	 sample line spectrum
#	 sample image
#	 sample image stack
#	 sample focus
#	 osa image
#	 osa focus
#	 detector image
#	 generic scan
 
root['/entry/data/stxm_scan_type'] = NXfield('sample point spectrum')
root['/entry/data/stxm_scan_type'].attrs['type'] = 'NX_CHAR'
root['/entry/data/stxm_scan_type'].attrs['EX_required'] = 'true'
 
root['/entry/data/data'] = NXfield(1.0)
root['/entry/data/data'].attrs['type'] = 'NX_NUMBER'
root['/entry/data/data'].attrs['EX_required'] = 'true'
root['/entry/data/data'].attrs['signal'] = '1'
 
root['/entry/data/energy'] = NXfield(1.0)
root['/entry/data/energy'].attrs['type'] = 'NX_FLOAT'
root['/entry/data/energy'].attrs['EX_required'] = 'true'
 
root['/entry/data/sample_y'] = NXfield(1.0)
root['/entry/data/sample_y'].attrs['type'] = 'NX_FLOAT'
root['/entry/data/sample_y'].attrs['EX_required'] = 'true'
 
root['/entry/data/sample_x'] = NXfield(1.0)
root['/entry/data/sample_x'].attrs['type'] = 'NX_FLOAT'
root['/entry/data/sample_x'].attrs['EX_required'] = 'true'
 
root['/entry/control/data'] = NXfield(1.0)
root['/entry/control/data'].attrs['type'] = 'NX_FLOAT'
root['/entry/control/data'].attrs['EX_required'] = 'true'

# Create the DOC strings 
root['/entry/definition'].attrs['EX_doc'] = ' Official NeXus NXDL schema to which this file conforms '
root['/entry/instrument/detector/data'].attrs['EX_doc'] = ' Detector data should be presented with the first dimension corresponding to the scan point and subsequent dimensions corresponding to the output of the detector. Detectors that provide more than one value per scan point should have a data array of rank 1+d, where d is the dimensions of the array provided per scan point. For example, an area detector should have an NXdetector data array of 3 dimensions, with the first being the set of scan points and the latter two being the x- and y- extent of the detector. NOTE: For each dimension > 1 there must exist a dim section such as: '
root['/entry/instrument/sample_x'].attrs['EX_doc'] = ' Measurements of the sample position from the x-axis interferometer. '
root['/entry/instrument/sample_y'].attrs['EX_doc'] = ' Measurements of the sample position from the y-axis interferometer. '
root['/entry/instrument/sample_z'].attrs['EX_doc'] = ' Measurements of the sample position from the z-axis interferometer. '
root['/entry/data/stxm_scan_type'].attrs['EX_doc'] = ' Label for typical scan types as a convenience for humans. Each label corresponds to a specific set of axes being scanned to produce a data array of shape: * sample point spectrum: (photon_energy,) * sample line spectrum: (photon_energy, sample_y/sample_x) * sample image: (sample_y, sample_x) * sample image stack: (photon_energy, sample_y, sample_x) * sample focus: (zoneplate_z, sample_y/sample_x) * osa image: (osa_y, osa_x) * osa focus: (zoneplate_z, osa_y/osa_x) * detector image: (detector_y, detector_x) The "generic scan" string is to be used when none of the other choices are appropriate. '
root['/entry/data/data'].attrs['EX_doc'] = ' Detectors that provide more than one value per scan point should be summarised to a single value per scan point for this array in order to simplify plotting. Note that "Line scans" and focus type scans measure along one spatial dimension but are not restricted to being parallel to the X or Y axes. Such scans should therefore use a single dimension for the positions along the spatial line. The "sample_x" and "sample_y" fields should then contain lists of the x- and y-positions and should both have the "axis" attribute pointing to the same dimension. '
root['/entry/data/energy'].attrs['EX_doc'] = ' List of photon energies of the X-ray beam. If scanned through multiple values, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
root['/entry/data/sample_y'].attrs['EX_doc'] = ' List of Y positions on the sample. If scanned through multiple values, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
root['/entry/data/sample_x'].attrs['EX_doc'] = ' List of X positions on the sample. If scanned through multiple values, then an "axis" attribute will be required to link the field to the appropriate data array dimension. '
root['/entry/control/data'].attrs['EX_doc'] = ' Values to use to normalise for time-variations in photon flux. Typically, the synchrotron storage ring electron beam current is used as a proxy for the X-ray beam intensity. Array must have same shape as the NXdata groups. '
 

# Create the ATTRIBUTES 
root.attrs['default'] = 'entry'
root['/entry/data'].set_default()
root['/entry/data'].attrs['signal'] = 'data'
root['/entry/data/data'].attrs['signal'] = '1'

# Save the file
root.save('NXstxm.nxs', 'w')


