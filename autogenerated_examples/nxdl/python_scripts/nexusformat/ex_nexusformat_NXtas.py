 
import numpy as np
from nexusformat.nexus import *
 
# Note this example script was generated by nxdl_to_hdf5.py using the current 
# installed version of the NEXUS definitions ver[v2020.10] 
 
root = NXroot()

# Create the GROUPS 
root['/entry'] = NXentry()
root['/entry'].attrs['EX_required'] = 'true'
root['/entry/instrument'] = NXinstrument()
root['/entry/instrument'].attrs['EX_required'] = 'true'
root['/entry/instrument/source'] = NXsource()
root['/entry/instrument/source'].attrs['EX_required'] = 'true'
root['/entry/instrument/monochromator'] = NXcrystal()
root['/entry/instrument/monochromator'].attrs['EX_required'] = 'true'
root['/entry/instrument/analyser'] = NXcrystal()
root['/entry/instrument/analyser'].attrs['EX_required'] = 'true'
root['/entry/instrument/detector'] = NXdetector()
root['/entry/instrument/detector'].attrs['EX_required'] = 'true'
root['/entry/sample'] = NXsample()
root['/entry/sample'].attrs['EX_required'] = 'true'
root['/entry/monitor'] = NXmonitor()
root['/entry/monitor'].attrs['EX_required'] = 'true'
root['/entry/data'] = NXdata()
root['/entry/data'].attrs['EX_required'] = 'true'

# Create the FIELDS 
 
root['/entry/title'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/title'].attrs['type'] = 'NX_CHAR'
root['/entry/title'].attrs['EX_required'] = 'true'
 
root['/entry/start_time'] = NXfield('2022-03-04T14:56:36.922755')
root['/entry/start_time'].attrs['type'] = 'NX_DATE_TIME'
root['/entry/start_time'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry']['definition'] are: 
#	 NXtas
 
root['/entry/definition'] = NXfield('NXtas')
root['/entry/definition'].attrs['type'] = 'NX_CHAR'
root['/entry/definition'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/source/name'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/instrument/source/name'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/name'].attrs['EX_required'] = 'true'
 
# Valid enumeration values for root['/entry/instrument/source']['probe'] are: 
#	 neutron
#	 x-ray
 
root['/entry/instrument/source/probe'] = NXfield('neutron')
root['/entry/instrument/source/probe'].attrs['type'] = 'NX_CHAR'
root['/entry/instrument/source/probe'].attrs['EX_required'] = 'true'
 
root['/entry/instrument/monochromator/ei'] = NXfield(1.0)
root['/entry/instrument/monochromator/ei'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/monochromator/ei'].attrs['EX_required'] = 'true'
root['/entry/instrument/monochromator/ei'].attrs['axis'] = '1'
root['/entry/instrument/monochromator/ei'].attrs['units'] = 'NX_ENERGY'
 
root['/entry/instrument/monochromator/rotation_angle'] = NXfield(1.0)
root['/entry/instrument/monochromator/rotation_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/monochromator/rotation_angle'].attrs['EX_required'] = 'true'
root['/entry/instrument/monochromator/rotation_angle'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/instrument/analyser/ef'] = NXfield(1.0)
root['/entry/instrument/analyser/ef'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/analyser/ef'].attrs['EX_required'] = 'true'
root['/entry/instrument/analyser/ef'].attrs['axis'] = '1'
root['/entry/instrument/analyser/ef'].attrs['units'] = 'NX_ENERGY'
 
root['/entry/instrument/analyser/rotation_angle'] = NXfield(1.0)
root['/entry/instrument/analyser/rotation_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/analyser/rotation_angle'].attrs['EX_required'] = 'true'
root['/entry/instrument/analyser/rotation_angle'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/instrument/analyser/polar_angle'] = NXfield(1.0)
root['/entry/instrument/analyser/polar_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/analyser/polar_angle'].attrs['EX_required'] = 'true'
root['/entry/instrument/analyser/polar_angle'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/instrument/detector/data'] = NXfield(1)
root['/entry/instrument/detector/data'].attrs['type'] = 'NX_INT'
root['/entry/instrument/detector/data'].attrs['EX_required'] = 'true'
root['/entry/instrument/detector/data'].attrs['signal'] = '1'
 
root['/entry/instrument/detector/polar_angle'] = NXfield(1.0)
root['/entry/instrument/detector/polar_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/instrument/detector/polar_angle'].attrs['EX_required'] = 'true'
root['/entry/instrument/detector/polar_angle'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/sample/name'] = NXfield('SAMPLE-CHAR-DATA')
root['/entry/sample/name'].attrs['type'] = 'NX_CHAR'
root['/entry/sample/name'].attrs['EX_required'] = 'true'
 
root['/entry/sample/qh'] = NXfield(1.0)
root['/entry/sample/qh'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/qh'].attrs['EX_required'] = 'true'
root['/entry/sample/qh'].attrs['axis'] = '1'
root['/entry/sample/qh'].attrs['units'] = 'NX_DIMENSIONLESS'
 
root['/entry/sample/qk'] = NXfield(1.0)
root['/entry/sample/qk'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/qk'].attrs['EX_required'] = 'true'
root['/entry/sample/qk'].attrs['axis'] = '1'
root['/entry/sample/qk'].attrs['units'] = 'NX_DIMENSIONLESS'
 
root['/entry/sample/ql'] = NXfield(1.0)
root['/entry/sample/ql'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/ql'].attrs['EX_required'] = 'true'
root['/entry/sample/ql'].attrs['axis'] = '1'
root['/entry/sample/ql'].attrs['units'] = 'NX_DIMENSIONLESS'
 
root['/entry/sample/en'] = NXfield(1.0)
root['/entry/sample/en'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/en'].attrs['EX_required'] = 'true'
root['/entry/sample/en'].attrs['axis'] = '1'
root['/entry/sample/en'].attrs['units'] = 'NX_ENERGY'
 
root['/entry/sample/rotation_angle'] = NXfield(1.0)
root['/entry/sample/rotation_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/rotation_angle'].attrs['EX_required'] = 'true'
root['/entry/sample/rotation_angle'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/sample/polar_angle'] = NXfield(1.0)
root['/entry/sample/polar_angle'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/polar_angle'].attrs['EX_required'] = 'true'
root['/entry/sample/polar_angle'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/sample/sgu'] = NXfield(1.0)
root['/entry/sample/sgu'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/sgu'].attrs['EX_required'] = 'true'
root['/entry/sample/sgu'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/sample/sgl'] = NXfield(1.0)
root['/entry/sample/sgl'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/sgl'].attrs['EX_required'] = 'true'
root['/entry/sample/sgl'].attrs['units'] = 'NX_ANGLE'
 
root['/entry/sample/unit_cell'] = NXfield(1.0)
root['/entry/sample/unit_cell'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/unit_cell'].attrs['EX_required'] = 'true'
root['/entry/sample/unit_cell'].attrs['units'] = 'NX_LENGTH'
 
root['/entry/sample/orientation_matrix'] = NXfield(1.0)
root['/entry/sample/orientation_matrix'].attrs['type'] = 'NX_FLOAT'
root['/entry/sample/orientation_matrix'].attrs['EX_required'] = 'true'
root['/entry/sample/orientation_matrix'].attrs['units'] = 'NX_DIMENSIONLESS'
 
# Valid enumeration values for root['/entry/monitor']['mode'] are: 
#	 monitor
#	 timer
 
root['/entry/monitor/mode'] = NXfield('monitor')
root['/entry/monitor/mode'].attrs['type'] = 'NX_CHAR'
root['/entry/monitor/mode'].attrs['EX_required'] = 'true'
 
root['/entry/monitor/preset'] = NXfield(1.0)
root['/entry/monitor/preset'].attrs['type'] = 'NX_FLOAT'
root['/entry/monitor/preset'].attrs['EX_required'] = 'true'
 
root['/entry/monitor/data'] = NXfield(1.0)
root['/entry/monitor/data'].attrs['type'] = 'NX_FLOAT'
root['/entry/monitor/data'].attrs['EX_required'] = 'true'
root['/entry/monitor/data'].attrs['units'] = 'NX_ANY'

# Create the LINKS 
root['/entry/data/ei'] = NXlink(target='/entry/instrument/monochromator/ei')

# Create the LINKS 
root['/entry/data/ef'] = NXlink(target='/entry/title')

# Create the LINKS 
root['/entry/data/en'] = NXlink(target='/entry/sample/en')

# Create the LINKS 
root['/entry/data/qh'] = NXlink(target='/entry/sample/qh')

# Create the LINKS 
root['/entry/data/qk'] = NXlink(target='/entry/sample/qk')

# Create the LINKS 
root['/entry/data/ql'] = NXlink(target='/entry/sample/ql')

# Create the LINKS 
root['/entry/data/data'] = NXlink(target='/entry/instrument/detector/data')

# Create the DOC strings 
root['/entry/definition'].attrs['EX_doc'] = 'Official NeXus NXDL schema to which this file conforms '
root['/entry/sample/name'].attrs['EX_doc'] = 'Descriptive name of sample '
root['/entry/monitor/mode'].attrs['EX_doc'] = 'Count to a preset value based on either clock time (timer) or received monitor counts (monitor). '
root['/entry/monitor/preset'].attrs['EX_doc'] = 'preset value for time or monitor '
root['/entry/monitor/data'].attrs['EX_doc'] = 'Total integral monitor counts '
root['/entry/data'].attrs['EX_doc'] = 'One of the ei,ef,qh,qk,ql,en should get a primary=1 attribute to denote the main scan axis '
 

# Create the ATTRIBUTES 
root.attrs['default'] = 'entry'
root['/entry/data'].set_default()
root['/entry/data'].attrs['signal'] = 'data'
root['/entry/data/data'].attrs['signal'] = '1'

# Save the file
root.save('NXtas.nxs', 'w')


